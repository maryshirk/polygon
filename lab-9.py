# Задача 13. Найти длину самой длинной последовательности одинаковых элементов в массиве
import numpy as np  # Импортируем библиотеку numpy


# Создаем функцию, которая находит длину максимальной подпоследовательности одинаковых элементов
def longest_repeated_sequence(arr):
    # Создаем numpy массив
    np_arr = np.array(arr)
    # Находим разности между последовательными элементами
    diff = np.diff(np_arr)
    # Находим индексы, где разность не равна нулю
    change_indices = np.where(diff != 0)[0] + 1
    # Рассчитываем длины последовательностей
    lengths = np.diff(np.concatenate(([0], change_indices, [len(np_arr)])))
    # Возвращаем максимальную длину
    return np.max(lengths)


# Оценка асимптотики:
# Создание массива: O(n) — преобразование списка в NumPy массив.
# Вычисление разностей: O(n) — использование np.diff() для нахождения разностей между элементами.
# Индексы изменений: O(n) — применение np.where() для нахождения индексов изменений.
# Объединение массивов: O(n) — использование np.concatenate() для объединения массивов.
# Вычисление длин последовательностей: O(n) — снова использование np.diff().
# Нахождение максимума: O(n) — использование np.max() для нахождения максимальной длины.
# Таким образом, общая асимптотика составляет:
# O(6n)=O(n)

# Использование памяти: 4*4*n байт - храним 4 целочисленных массива длиной n


# Протестируем функцию
def test_longest_repeated_sequence():
    # Тест. Ответ в конце массива
    assert longest_repeated_sequence([1, 1, 2, 2, 2, 3, 3, 1, 1, 1, 1]) == 4, "Тест 1 не пройден"
    # Тест. Длина 1
    assert longest_repeated_sequence([1, 2, 3, 4, 5]) == 1, "Тест 2 не пройден"
    # Тест. Ответ весь массив
    assert longest_repeated_sequence([1, 1, 1, 1, 1]) == 5, "Тест 3 не пройден"
    # Тест. Ответ в середине массива
    assert longest_repeated_sequence([1, 2, 2, 2, 2, 3, 3, 3]) == 4, "Тест 4 не пройден"
    # Тест. Пустой массив
    assert longest_repeated_sequence([]) == 0, "Тест 5 не пройден"
    # Тест. Один элемент в массиве
    assert longest_repeated_sequence([5]) == 1, "Тест 6 не пройден"
    # Тест. Две подпоследовательности одинаковой длины
    assert longest_repeated_sequence([1, 1, 1, 2, 2, 2, 3]) == 3, "Тест 7 не пройден"
    # Тест. Ответ в начале массива
    assert longest_repeated_sequence([1, 1, 1, 2, 2, 3, 3]) == 3, "Тест 8 не пройден"
    # Если все тесты пройдены выводим сигнал
    print("Все тесты пройдены")


if __name__ == "__main__":
    # Запускаем тесты
    test_longest_repeated_sequence()
    # Пример из условия
    array = [1, 1, 1, 2, 2, 5]
    print(longest_repeated_sequence(array))  # Вывод: 3
